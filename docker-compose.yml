version: '3.8'

services:
  # FastAPI Application
  app:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: quenty-app
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:quenty123@db:5432/quenty_db
      - REDIS_URL=redis://redis:6379/0
      - ENVIRONMENT=development
      - LOG_LEVEL=DEBUG
    volumes:
      - .:/app
      - ./logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - quenty-network
    restart: unless-stopped

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: quenty-db
    environment:
      POSTGRES_DB: quenty_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: quenty123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d quenty_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - quenty-network
    restart: unless-stopped

  # Redis for caching and event bus
  redis:
    image: redis:7-alpine
    container_name: quenty-redis
    command: redis-server --appendonly yes --requirepass quenty123
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - quenty-network
    restart: unless-stopped

  # pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: quenty-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@quenty.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./docker/pgadmin/servers.json:/pgadmin4/servers.json
    ports:
      - "5050:80"
    depends_on:
      - db
    networks:
      - quenty-network
    restart: unless-stopped

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: quenty-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - app
    networks:
      - quenty-network
    restart: unless-stopped

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: quenty-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - quenty-network
    restart: unless-stopped

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: quenty-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - quenty-network
    restart: unless-stopped

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: quenty-jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - quenty-network
    restart: unless-stopped

  # Carrier Integration Service
  carrier-integration:
    build:
      context: ./microservices/carrier-integration
      dockerfile: Dockerfile
    container_name: quenty-carrier-integration
    ports:
      - "8009:8009"
    environment:
      - DATABASE_URL=postgresql://postgres:quenty123@db:5432/carrier_db
      - REDIS_URL=redis://:quenty123@redis:6379/1
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672//
      - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672//
      - CELERY_RESULT_BACKEND=redis://:quenty123@redis:6379/1
      - SECRET_KEY=${CARRIER_SECRET_KEY:-change-this-in-production}
      - ENCRYPTION_KEY=${CARRIER_ENCRYPTION_KEY:-32-byte-key-change-in-production}
    depends_on:
      - db
      - redis
      - rabbitmq
    volumes:
      - ./microservices/carrier-integration/src:/app/src
      - carrier_credentials:/app/credentials
    networks:
      - quenty-network
    restart: unless-stopped

  # Celery Worker for Carrier Integration
  carrier-worker:
    build:
      context: ./microservices/carrier-integration
      dockerfile: Dockerfile
    container_name: quenty-carrier-worker
    environment:
      - DATABASE_URL=postgresql://postgres:quenty123@db:5432/carrier_db
      - REDIS_URL=redis://:quenty123@redis:6379/1
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672//
      - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672//
      - CELERY_RESULT_BACKEND=redis://:quenty123@redis:6379/1
      - SECRET_KEY=${CARRIER_SECRET_KEY:-change-this-in-production}
      - ENCRYPTION_KEY=${CARRIER_ENCRYPTION_KEY:-32-byte-key-change-in-production}
    depends_on:
      - db
      - redis
      - rabbitmq
    volumes:
      - ./microservices/carrier-integration/src:/app/src
      - carrier_credentials:/app/credentials
    networks:
      - quenty-network
    command: celery -A src.celery_app worker --loglevel=info --queues=default,quotes,labels,tracking,webhooks,priority
    restart: unless-stopped

  # Celery Beat for Carrier Integration
  carrier-beat:
    build:
      context: ./microservices/carrier-integration
      dockerfile: Dockerfile
    container_name: quenty-carrier-beat
    environment:
      - DATABASE_URL=postgresql://postgres:quenty123@db:5432/carrier_db
      - REDIS_URL=redis://:quenty123@redis:6379/1
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672//
      - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672//
      - CELERY_RESULT_BACKEND=redis://:quenty123@redis:6379/1
      - SECRET_KEY=${CARRIER_SECRET_KEY:-change-this-in-production}
      - ENCRYPTION_KEY=${CARRIER_ENCRYPTION_KEY:-32-byte-key-change-in-production}
    depends_on:
      - db
      - redis
      - rabbitmq
    volumes:
      - ./microservices/carrier-integration/src:/app/src
      - carrier_credentials:/app/credentials
    networks:
      - quenty-network
    command: celery -A src.celery_app beat --loglevel=info
    restart: unless-stopped

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: quenty-rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - quenty-network
    restart: unless-stopped

  # Flower for Celery Monitoring
  flower:
    build:
      context: ./microservices/carrier-integration
      dockerfile: Dockerfile
    container_name: quenty-flower
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672//
      - CELERY_RESULT_BACKEND=redis://:quenty123@redis:6379/1
    depends_on:
      - redis
      - rabbitmq
    networks:
      - quenty-network
    command: celery -A src.celery_app flower --port=5555
    restart: unless-stopped

  # Shopify Integration Service
  shopify-integration:
    build:
      context: ./microservices/shopify-integration
      dockerfile: Dockerfile
    container_name: quenty-shopify
    ports:
      - "8010:8000"
    environment:
      - DATABASE_URL=postgresql://postgres:quenty123@db:5432/shopify_db
      - REDIS_URL=redis://:quenty123@redis:6379/2
      - LOG_LEVEL=INFO
      - CORS_ORIGINS=http://localhost:3000,http://localhost:8000
      - SECRET_KEY=${SHOPIFY_SECRET_KEY:-change-this-in-production}
      - ENCRYPTION_KEY=${SHOPIFY_ENCRYPTION_KEY:-32-byte-key-change-in-production}
    depends_on:
      - db
      - redis
    volumes:
      - ./microservices/shopify-integration/src:/app/src
    networks:
      - quenty-network
    restart: unless-stopped

  # Shopify Celery Worker
  shopify-worker:
    build:
      context: ./microservices/shopify-integration
      dockerfile: Dockerfile
    container_name: quenty-shopify-worker
    environment:
      - DATABASE_URL=postgresql://postgres:quenty123@db:5432/shopify_db
      - REDIS_URL=redis://:quenty123@redis:6379/2
      - PYTHONPATH=/app/src
    depends_on:
      - db
      - redis
    volumes:
      - ./microservices/shopify-integration/src:/app/src
    networks:
      - quenty-network
    command: celery -A src.tasks.celery_app worker --loglevel=info
    restart: unless-stopped

  # Shopify Celery Beat
  shopify-beat:
    build:
      context: ./microservices/shopify-integration
      dockerfile: Dockerfile
    container_name: quenty-shopify-beat
    environment:
      - DATABASE_URL=postgresql://postgres:quenty123@db:5432/shopify_db
      - REDIS_URL=redis://:quenty123@redis:6379/2
      - PYTHONPATH=/app/src
    depends_on:
      - db
      - redis
    volumes:
      - ./microservices/shopify-integration/src:/app/src
    networks:
      - quenty-network
    command: celery -A src.tasks.celery_app beat --loglevel=info
    restart: unless-stopped

  # RAG Service for AI-powered chat
  rag-service:
    build:
      context: ./microservices/rag-service
      dockerfile: Dockerfile
    container_name: quenty-rag
    ports:
      - "8011:8010"
    environment:
      - DATABASE_URL=postgresql://postgres:quenty123@db:5432/rag_db
      - VECTOR_DB_URL=postgresql://postgres:quenty123@db:5432/rag_db
      - REDIS_URL=redis://:quenty123@redis:6379/3
      - USE_LOCAL_MODELS=true
      - AUTH_DB_URL=postgresql://postgres:quenty123@db:5432/auth_db
      - CUSTOMER_DB_URL=postgresql://postgres:quenty123@db:5432/customer_db
      - ORDER_DB_URL=postgresql://postgres:quenty123@db:5432/order_db
      - CARRIER_DB_URL=postgresql://postgres:quenty123@db:5432/carrier_db
      - ANALYTICS_DB_URL=postgresql://postgres:quenty123@db:5432/analytics_db
      - FRANCHISE_DB_URL=postgresql://postgres:quenty123@db:5432/franchise_db
      - INTERNATIONAL_DB_URL=postgresql://postgres:quenty123@db:5432/international_db
      - MICROCREDIT_DB_URL=postgresql://postgres:quenty123@db:5432/microcredit_db
      - PICKUP_DB_URL=postgresql://postgres:quenty123@db:5432/pickup_db
      - REVERSE_LOGISTICS_DB_URL=postgresql://postgres:quenty123@db:5432/reverse_logistics_db
      - SECRET_KEY=${RAG_SECRET_KEY:-change-this-in-production}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
    depends_on:
      - db
      - redis
    volumes:
      - ./microservices/rag-service/src:/app/src
      - ./microservices/rag-service/chat-client:/app/chat-client
    networks:
      - quenty-network
    restart: unless-stopped

  # MercadoLibre Integration Service
  mercadolibre-integration:
    build:
      context: ./microservices/mercadolibre-integration
      dockerfile: Dockerfile
    container_name: quenty-mercadolibre
    ports:
      - "8012:8012"
    environment:
      - DATABASE_URL=postgresql://postgres:quenty123@db:5432/mercadolibre_db
      - REDIS_URL=redis://:quenty123@redis:6379/4
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
      - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672/
      - CELERY_RESULT_BACKEND=redis://:quenty123@redis:6379/4
      - MELI_CLIENT_ID=${MELI_CLIENT_ID:-}
      - MELI_CLIENT_SECRET=${MELI_CLIENT_SECRET:-}
      - MELI_SITE_ID=${MELI_SITE_ID:-MCO}
      - SECRET_KEY=${MELI_SECRET_KEY:-change-this-in-production}
      - ENCRYPTION_KEY=${MELI_ENCRYPTION_KEY:-32-byte-key-change-in-production}
    depends_on:
      - db
      - redis
      - rabbitmq
    volumes:
      - ./microservices/mercadolibre-integration/src:/app/src
    networks:
      - quenty-network
    restart: unless-stopped

  # MercadoLibre Celery Worker
  mercadolibre-worker:
    build:
      context: ./microservices/mercadolibre-integration
      dockerfile: Dockerfile
    container_name: quenty-mercadolibre-worker
    environment:
      - DATABASE_URL=postgresql://postgres:quenty123@db:5432/mercadolibre_db
      - REDIS_URL=redis://:quenty123@redis:6379/4
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
      - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672/
      - CELERY_RESULT_BACKEND=redis://:quenty123@redis:6379/4
      - MELI_CLIENT_ID=${MELI_CLIENT_ID:-}
      - MELI_CLIENT_SECRET=${MELI_CLIENT_SECRET:-}
      - MELI_SITE_ID=${MELI_SITE_ID:-MCO}
    depends_on:
      - db
      - redis
      - rabbitmq
      - mercadolibre-integration
    volumes:
      - ./microservices/mercadolibre-integration/src:/app/src
    networks:
      - quenty-network
    command: celery -A src.tasks.celery_app worker --loglevel=info --queues=default,products,orders,questions,inventory
    restart: unless-stopped

  # MercadoLibre Celery Beat
  mercadolibre-beat:
    build:
      context: ./microservices/mercadolibre-integration
      dockerfile: Dockerfile
    container_name: quenty-mercadolibre-beat
    environment:
      - DATABASE_URL=postgresql://postgres:quenty123@db:5432/mercadolibre_db
      - REDIS_URL=redis://:quenty123@redis:6379/4
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
      - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672/
      - CELERY_RESULT_BACKEND=redis://:quenty123@redis:6379/4
      - MELI_CLIENT_ID=${MELI_CLIENT_ID:-}
      - MELI_CLIENT_SECRET=${MELI_CLIENT_SECRET:-}
      - MELI_SITE_ID=${MELI_SITE_ID:-MCO}
    depends_on:
      - db
      - redis
      - rabbitmq
      - mercadolibre-integration
    volumes:
      - ./microservices/mercadolibre-integration/src:/app/src
    networks:
      - quenty-network
    command: celery -A src.tasks.celery_app beat --loglevel=info
    restart: unless-stopped


volumes:
  postgres_data:
  redis_data:
  pgadmin_data:
  prometheus_data:
  grafana_data:
  rabbitmq_data:
  carrier_credentials:

networks:
  quenty-network:
    driver: bridge
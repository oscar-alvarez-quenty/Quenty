# ============================================================================
# DOCKER COMPOSE ENVIRONMENT VARIABLES
# ============================================================================
# Environment variables for Docker Compose orchestration
# Copy to .env for docker-compose to automatically load
# ============================================================================

# ----------------------------------------------------------------------------
# COMPOSE PROJECT
# ----------------------------------------------------------------------------

COMPOSE_PROJECT_NAME=quenty
COMPOSE_FILE=docker-compose.yml:docker-compose.override.yml
COMPOSE_PROFILES=full  # full, minimal, dev, prod

# ----------------------------------------------------------------------------
# IMAGE VERSIONS
# ----------------------------------------------------------------------------

# Database versions
POSTGRES_VERSION=15-alpine
REDIS_VERSION=7-alpine
MONGODB_VERSION=7.0
ELASTICSEARCH_VERSION=8.11.0

# Message brokers
RABBITMQ_VERSION=3-management-alpine
KAFKA_VERSION=3.6
ZOOKEEPER_VERSION=3.9

# Monitoring
PROMETHEUS_VERSION=latest
GRAFANA_VERSION=latest
JAEGER_VERSION=latest

# ----------------------------------------------------------------------------
# PORT MAPPINGS
# ----------------------------------------------------------------------------

# Application ports
APP_PORT=8000
AUTH_SERVICE_PORT=8001
CUSTOMER_SERVICE_PORT=8002
ORDER_SERVICE_PORT=8003
SHIPPING_SERVICE_PORT=8004
PAYMENT_SERVICE_PORT=8005

# Database ports
POSTGRES_PORT=5432
REDIS_PORT=6379
MONGODB_PORT=27017

# Message broker ports
RABBITMQ_PORT=5672
RABBITMQ_MANAGEMENT_PORT=15672
KAFKA_PORT=9092

# Monitoring ports
PROMETHEUS_PORT=9090
GRAFANA_PORT=3000
JAEGER_PORT=16686

# ----------------------------------------------------------------------------
# VOLUME PATHS
# ----------------------------------------------------------------------------

# Data volumes
DATA_PATH=./data
POSTGRES_DATA_PATH=./data/postgres
REDIS_DATA_PATH=./data/redis
MONGODB_DATA_PATH=./data/mongodb

# Log volumes
LOGS_PATH=./logs
APP_LOGS_PATH=./logs/app
NGINX_LOGS_PATH=./logs/nginx

# Backup volumes
BACKUP_PATH=./backups

# ----------------------------------------------------------------------------
# NETWORK CONFIGURATION
# ----------------------------------------------------------------------------

# Network settings
NETWORK_NAME=quenty-network
NETWORK_DRIVER=bridge
NETWORK_SUBNET=172.28.0.0/16
NETWORK_GATEWAY=172.28.0.1

# Service IPs (optional static assignment)
APP_IP=172.28.1.10
DB_IP=172.28.1.20
REDIS_IP=172.28.1.30

# ----------------------------------------------------------------------------
# RESOURCE LIMITS
# ----------------------------------------------------------------------------

# CPU limits (cores)
APP_CPU_LIMIT=2
DB_CPU_LIMIT=4
REDIS_CPU_LIMIT=1
WORKER_CPU_LIMIT=1

# Memory limits
APP_MEMORY_LIMIT=2g
DB_MEMORY_LIMIT=4g
REDIS_MEMORY_LIMIT=1g
WORKER_MEMORY_LIMIT=1g

# Memory reservations
APP_MEMORY_RESERVATION=1g
DB_MEMORY_RESERVATION=2g
REDIS_MEMORY_RESERVATION=512m

# ----------------------------------------------------------------------------
# POSTGRESQL CONFIGURATION
# ----------------------------------------------------------------------------

POSTGRES_HOST=db
POSTGRES_PORT=5432
POSTGRES_DB=quenty_db
POSTGRES_USER=postgres
POSTGRES_PASSWORD=quenty123
POSTGRES_MAX_CONNECTIONS=200
POSTGRES_SHARED_BUFFERS=256MB

# Additional databases
POSTGRES_MULTIPLE_DATABASES=auth_db,customer_db,order_db,carrier_db

# ----------------------------------------------------------------------------
# REDIS CONFIGURATION
# ----------------------------------------------------------------------------

REDIS_HOST=redis
REDIS_PORT=6379
REDIS_PASSWORD=quenty123
REDIS_MAXMEMORY=2gb
REDIS_MAXMEMORY_POLICY=allkeys-lru
REDIS_DATABASES=16

# ----------------------------------------------------------------------------
# RABBITMQ CONFIGURATION
# ----------------------------------------------------------------------------

RABBITMQ_HOST=rabbitmq
RABBITMQ_PORT=5672
RABBITMQ_DEFAULT_USER=admin
RABBITMQ_DEFAULT_PASS=admin123
RABBITMQ_DEFAULT_VHOST=/
RABBITMQ_MANAGEMENT=true

# ----------------------------------------------------------------------------
# NGINX CONFIGURATION
# ----------------------------------------------------------------------------

NGINX_HOST=nginx
NGINX_PORT=80
NGINX_SSL_PORT=443
NGINX_WORKER_PROCESSES=auto
NGINX_WORKER_CONNECTIONS=1024
NGINX_CLIENT_MAX_BODY_SIZE=100m

# SSL Configuration
SSL_CERT_PATH=./certs/cert.pem
SSL_KEY_PATH=./certs/key.pem
SSL_DHPARAM_PATH=./certs/dhparam.pem

# ----------------------------------------------------------------------------
# MONITORING CONFIGURATION
# ----------------------------------------------------------------------------

# Prometheus
PROMETHEUS_CONFIG_PATH=./docker/prometheus/prometheus.yml
PROMETHEUS_RETENTION=15d

# Grafana
GRAFANA_ADMIN_USER=admin
GRAFANA_ADMIN_PASSWORD=admin123
GRAFANA_INSTALL_PLUGINS=redis-datasource,postgres-datasource

# Logging
LOKI_ENABLED=true
LOKI_PORT=3100

# ----------------------------------------------------------------------------
# DEVELOPMENT SETTINGS
# ----------------------------------------------------------------------------

# Hot reload
DEV_HOT_RELOAD=true
DEV_VOLUME_MOUNTS=true
DEV_SOURCE_PATH=./src

# Debugging
DEBUG_PORT=5678
DEBUGGER=ptvsd  # ptvsd, debugpy

# Testing
TEST_DATABASE=quenty_test_db
TEST_REDIS_DB=15

# ----------------------------------------------------------------------------
# PRODUCTION SETTINGS
# ----------------------------------------------------------------------------

# Scaling
APP_REPLICAS=3
WORKER_REPLICAS=5
NGINX_REPLICAS=2

# Health checks
HEALTHCHECK_INTERVAL=30s
HEALTHCHECK_TIMEOUT=10s
HEALTHCHECK_RETRIES=3
HEALTHCHECK_START_PERIOD=40s

# Restart policy
RESTART_POLICY=unless-stopped  # always, unless-stopped, on-failure

# ----------------------------------------------------------------------------
# BACKUP CONFIGURATION
# ----------------------------------------------------------------------------

BACKUP_ENABLED=true
BACKUP_SCHEDULE=0 2 * * *  # Daily at 2 AM
BACKUP_RETENTION_DAYS=30
BACKUP_DATABASE=true
BACKUP_REDIS=true
BACKUP_VOLUMES=true

# S3 Backup (optional)
BACKUP_S3_ENABLED=false
BACKUP_S3_BUCKET=quenty-backups
BACKUP_S3_REGION=us-east-1

# ----------------------------------------------------------------------------
# SECURITY SETTINGS
# ----------------------------------------------------------------------------

# Container security
SECURITY_OPT=no-new-privileges:true
READ_ONLY_ROOT_FS=false
DROP_CAPABILITIES=ALL

# User configuration
USER_UID=1000
USER_GID=1000

# Secrets management
SECRETS_DRIVER=file  # file, external
SECRETS_PATH=./secrets

# ----------------------------------------------------------------------------
# LOGGING CONFIGURATION
# ----------------------------------------------------------------------------

# Logging driver
LOGGING_DRIVER=json-file  # json-file, syslog, journald, fluentd
LOGGING_MAX_SIZE=100m
LOGGING_MAX_FILE=10

# Log levels
LOG_LEVEL_APP=INFO
LOG_LEVEL_DB=WARNING
LOG_LEVEL_NGINX=ERROR

# ----------------------------------------------------------------------------
# BUILD CONFIGURATION
# ----------------------------------------------------------------------------

# Build args
BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
BUILD_VERSION=1.0.0
BUILD_VCS_REF=$(git rev-parse --short HEAD)

# Build cache
BUILDKIT_INLINE_CACHE=1
DOCKER_BUILDKIT=1

# Registry
REGISTRY_URL=docker.io
REGISTRY_USERNAME=
REGISTRY_PASSWORD=

# ----------------------------------------------------------------------------
# ORCHESTRATION
# ----------------------------------------------------------------------------

# Swarm mode
SWARM_MODE=false
SWARM_MANAGER_IP=
SWARM_WORKER_TOKEN=

# Kubernetes
K8S_DEPLOYMENT=false
K8S_NAMESPACE=quenty
K8S_CONTEXT=default

# ----------------------------------------------------------------------------
# FEATURE FLAGS
# ----------------------------------------------------------------------------

ENABLE_AUTH_SERVICE=true
ENABLE_CUSTOMER_SERVICE=true
ENABLE_ORDER_SERVICE=true
ENABLE_CARRIER_SERVICE=true
ENABLE_ANALYTICS=true
ENABLE_MONITORING=true
ENABLE_BACKUP=true

# ----------------------------------------------------------------------------
# MAINTENANCE
# ----------------------------------------------------------------------------

MAINTENANCE_MODE=false
MAINTENANCE_MESSAGE=System under maintenance
MAINTENANCE_START=
MAINTENANCE_END=
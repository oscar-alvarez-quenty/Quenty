server:
  http_listen_port: 9080
  grpc_listen_port: 0

positions:
  filename: /tmp/positions.yaml

clients:
  - url: http://loki:3100/loki/api/v1/push

scrape_configs:
  # Docker container logs
  - job_name: docker
    static_configs:
      - targets:
          - localhost
        labels:
          job: docker
          __path__: /var/lib/docker/containers/*/*.log

    pipeline_stages:
      - json:
          expressions:
            output: log
            stream: stream
            time: time
            attrs:
      - json:
          expressions:
            tag:
          source: attrs
      - regex:
          expression: (?P<container_name>[^|]+)
          source: tag
      - timestamp:
          format: RFC3339Nano
          source: time
      - labels:
          stream:
          container_name:
      - output:
          source: output

  # Quenty API Gateway logs
  - job_name: api-gateway
    static_configs:
      - targets:
          - localhost
        labels:
          job: api-gateway
          service: api-gateway
          __path__: /var/lib/docker/containers/*/*.log
    pipeline_stages:
      - json:
          expressions:
            output: log
            stream: stream
            time: time
            attrs:
      - json:
          expressions:
            tag:
          source: attrs
      - regex:
          expression: quenty-api-gateway
          source: tag
      - match:
          selector: '{job="api-gateway"}'
          stages:
            - regex:
                expression: '(?P<level>INFO|DEBUG|WARNING|ERROR|CRITICAL):\s+(?P<client_info>[^\s]+)\s+-\s+"(?P<method>\w+)\s+(?P<path>[^"]+)"\s+(?P<status>\d+)?\s*(?P<message>.*)'
                source: output
            - labels:
                level:
                method:
                status:
            - timestamp:
                format: RFC3339Nano
                source: time

  # Quenty Microservices logs
  - job_name: microservices
    static_configs:
      - targets:
          - localhost
        labels:
          job: microservices
          __path__: /var/lib/docker/containers/*/*.log
    pipeline_stages:
      - json:
          expressions:
            output: log
            stream: stream
            time: time
            attrs:
      - json:
          expressions:
            tag:
          source: attrs
      # Extract container ID from file path
      - regex:
          expression: '/var/lib/docker/containers/(?P<container_id>[^/]+)/'
          source: filename
      - match:
          selector: '{job="microservices"}'
          stages:
            # Extract log level and service logger from structured logs
            - regex:
                expression: '(?P<level>INFO|DEBUG|WARNING|ERROR|CRITICAL):\s*(?P<service_logger>[^:]+):\s*(?P<message>.*)'
                source: output
            # Map container ID to service name (using hasPrefix since IDs are truncated)
            - template:
                source: service_name
                template: '{{ if eq .service_logger "customer-service" }}customer{{ else if eq .service_logger "auth-service" }}auth{{ else if eq .service_logger "order-service" }}order{{ else if eq .service_logger "pickup-service" }}pickup{{ else if eq .service_logger "international-shipping-service" }}intl-shipping{{ else if eq .service_logger "microcredit-service" }}microcredit{{ else if eq .service_logger "analytics-service" }}analytics{{ else if eq .service_logger "reverse-logistics-service" }}reverse-logistics{{ else if eq .service_logger "franchise-service" }}franchise{{ else if contains .service_logger "api-gateway" }}api-gateway{{ else if hasPrefix .container_id "ec23b7b9e339" }}customer{{ else if hasPrefix .container_id "b0f8a7159bf2" }}auth{{ else if hasPrefix .container_id "71a7cd481bc7" }}order{{ else if hasPrefix .container_id "5ff190900889" }}pickup{{ else if hasPrefix .container_id "7db50476b684" }}intl-shipping{{ else if hasPrefix .container_id "0bf2e819ad1d" }}microcredit{{ else if hasPrefix .container_id "cad9d7a14cca" }}analytics{{ else if hasPrefix .container_id "dd4b8fdcfa61" }}reverse-logistics{{ else if hasPrefix .container_id "ebf9e51e7c09" }}franchise{{ else if hasPrefix .container_id "a5d9e5bdca33" }}api-gateway{{ else }}unknown{{ end }}'
            - labels:
                service_name:
                level:
                service_logger:
                container_id:
            - timestamp:
                format: RFC3339Nano
                source: time

  # PostgreSQL database logs
  - job_name: postgres
    static_configs:
      - targets:
          - localhost
        labels:
          job: postgres
          __path__: /var/lib/docker/containers/*/*.log
    pipeline_stages:
      - json:
          expressions:
            output: log
            stream: stream
            attrs:
      - json:
          expressions:
            tag:
          source: attrs
      - regex:
          expression: quenty-(?P<database_name>[^-]+)-db
          source: tag
      - match:
          selector: '{job="postgres"}'
          stages:
            - regex:
                expression: '(?P<timestamp>\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}.\d+) (?P<timezone>\w+) \[(?P<pid>\d+)\] (?P<level>\w+): (?P<message>.*)'
                source: output
            - labels:
                database_name:
                level:
                pid:
            - timestamp:
                format: '2006-01-02 15:04:05'
                source: timestamp

  # Redis logs
  - job_name: redis
    static_configs:
      - targets:
          - localhost
        labels:
          job: redis
          service: redis
          __path__: /var/lib/docker/containers/*/*.log
    pipeline_stages:
      - json:
          expressions:
            output: log
            stream: stream
            attrs:
      - json:
          expressions:
            tag:
          source: attrs
      - regex:
          expression: quenty-redis
          source: tag
      - match:
          selector: '{job="redis"}'
          stages:
            - regex:
                expression: '(?P<pid>\d+):(?P<role>\w+) (?P<timestamp>\d{2} \w+ \d{4} \d{2}:\d{2}:\d{2}.\d+) (?P<level>\w+) (?P<message>.*)'
                source: output
            - labels:
                level:
                role:
                pid:

  # RabbitMQ logs
  - job_name: rabbitmq
    static_configs:
      - targets:
          - localhost
        labels:
          job: rabbitmq
          service: rabbitmq
          __path__: /var/lib/docker/containers/*/*.log
    pipeline_stages:
      - json:
          expressions:
            output: log
            stream: stream
            attrs:
      - json:
          expressions:
            tag:
          source: attrs
      - regex:
          expression: quenty-rabbitmq
          source: tag
      - match:
          selector: '{job="rabbitmq"}'
          stages:
            - regex:
                expression: '(?P<timestamp>\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}.\d+) \[(?P<level>\w+)\] (?P<message>.*)'
                source: output
            - labels:
                level:
            - timestamp:
                format: '2006-01-02 15:04:05'
                source: timestamp

  # Nginx logs
  - job_name: nginx
    static_configs:
      - targets:
          - localhost
        labels:
          job: nginx
          service: nginx
          __path__: /var/lib/docker/containers/*/*.log
    pipeline_stages:
      - json:
          expressions:
            output: log
            stream: stream
            attrs:
      - json:
          expressions:
            tag:
          source: attrs
      - regex:
          expression: quenty-nginx
          source: tag
      - match:
          selector: '{job="nginx"}'
          stages:
            - regex:
                expression: '(?P<remote_addr>[\d\.]+) - (?P<remote_user>\S+) \[(?P<timestamp>[^\]]+)\] "(?P<method>\w+) (?P<path>\S+) (?P<protocol>\S+)" (?P<status>\d+) (?P<bytes_sent>\d+) "(?P<http_referer>[^"]*)" "(?P<http_user_agent>[^"]*)"'
                source: output
            - labels:
                method:
                status:
                remote_addr:
            - timestamp:
                format: '02/Jan/2006:15:04:05 -0700'
                source: timestamp
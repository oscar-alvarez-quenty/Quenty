version: '3.8'

services:
  # API Gateway
  api-gateway:
    build:
      context: ./microservices/api-gateway
      dockerfile: Dockerfile
    container_name: quenty-api-gateway
    ports:
      - "8000:8000"
    environment:
      - SERVICE_NAME=api-gateway
      - LOG_LEVEL=INFO
      - CUSTOMER_SERVICE_URL=http://customer-service:8001
      - ORDER_SERVICE_URL=http://order-service:8002
      - PICKUP_SERVICE_URL=http://pickup-service:8003
      - INTL_SHIPPING_SERVICE_URL=http://international-shipping-service:8004
      - MICROCREDIT_SERVICE_URL=http://microcredit-service:8005
      - ANALYTICS_SERVICE_URL=http://analytics-service:8006
      - REVERSE_LOGISTICS_SERVICE_URL=http://reverse-logistics-service:8007
      - FRANCHISE_SERVICE_URL=http://franchise-service:8008
      - AUTH_SERVICE_URL=http://auth-service:8009
    depends_on:
      - auth-service
      - customer-service
      - order-service
      - pickup-service
      - international-shipping-service
      - microcredit-service
      - analytics-service
      - reverse-logistics-service
      - franchise-service
    networks:
      - quenty-network
    restart: unless-stopped

  # Auth Service
  auth-service:
    build:
      context: ./microservices/auth-service
      dockerfile: Dockerfile
    container_name: quenty-auth-service
    environment:
      - SERVICE_NAME=auth-service
      - DATABASE_URL=postgresql+asyncpg://auth:auth_pass@auth-db:5432/auth_db
      - REDIS_URL=redis://redis:6379/0
      - LOG_LEVEL=INFO
      - JWT_SECRET_KEY=your-secret-key-change-this-in-production
      - JWT_ALGORITHM=HS256
      - JWT_ACCESS_TOKEN_EXPIRE_MINUTES=30
      - JWT_REFRESH_TOKEN_EXPIRE_DAYS=7
      - INITIAL_ADMIN_USERNAME=admin
      - INITIAL_ADMIN_PASSWORD=AdminPassword123
      - INITIAL_ADMIN_EMAIL=admin@quenty.com
      - INITIAL_ADMIN_FIRST_NAME=System
      - INITIAL_ADMIN_LAST_NAME=Administrator
    depends_on:
      - auth-db
      - redis
    networks:
      - quenty-network
    restart: unless-stopped

  auth-db:
    image: postgres:15-alpine
    container_name: quenty-auth-db
    environment:
      - POSTGRES_USER=auth
      - POSTGRES_PASSWORD=auth_pass
      - POSTGRES_DB=auth_db
    volumes:
      - auth-db-data:/var/lib/postgresql/data
    networks:
      - quenty-network
    restart: unless-stopped

  # Customer Service
  customer-service:
    build:
      context: ./microservices/customer
      dockerfile: Dockerfile
    container_name: quenty-customer-service
    environment:
      - SERVICE_NAME=customer-service
      - DATABASE_URL=postgresql+asyncpg://customer:customer_pass@customer-db:5432/customer_db
      - REDIS_URL=redis://redis:6379/1
      - LOG_LEVEL=INFO
      - AUTH_SERVICE_URL=http://auth-service:8009
    depends_on:
      - customer-db
      - redis
    networks:
      - quenty-network
    restart: unless-stopped

  customer-db:
    image: postgres:15-alpine
    container_name: quenty-customer-db
    environment:
      - POSTGRES_USER=customer
      - POSTGRES_PASSWORD=customer_pass
      - POSTGRES_DB=customer_db
    volumes:
      - customer-db-data:/var/lib/postgresql/data
    networks:
      - quenty-network
    restart: unless-stopped

  # Order Service
  order-service:
    build:
      context: ./microservices/order
      dockerfile: Dockerfile
    container_name: quenty-order-service
    environment:
      - SERVICE_NAME=order-service
      - DATABASE_URL=postgresql+asyncpg://order:order_pass@order-db:5432/order_db
      - REDIS_URL=redis://redis:6379/2
      - LOG_LEVEL=INFO
      - AUTH_SERVICE_URL=http://auth-service:8009
      - CUSTOMER_SERVICE_URL=http://customer-service:8001
      - SHIPPING_SERVICE_URL=http://international-shipping-service:8004
    depends_on:
      - order-db
      - redis
    networks:
      - quenty-network
    restart: unless-stopped

  order-db:
    image: postgres:15-alpine
    container_name: quenty-order-db
    environment:
      - POSTGRES_USER=order
      - POSTGRES_PASSWORD=order_pass
      - POSTGRES_DB=order_db
    volumes:
      - order-db-data:/var/lib/postgresql/data
    networks:
      - quenty-network
    restart: unless-stopped

  # Pickup Service
  pickup-service:
    build:
      context: ./microservices/pickup
      dockerfile: Dockerfile
    container_name: quenty-pickup-service
    environment:
      - SERVICE_NAME=pickup-service
      - DATABASE_URL=postgresql+asyncpg://pickup:pickup_pass@pickup-db:5432/pickup_db
      - REDIS_URL=redis://redis:6379/3
      - LOG_LEVEL=INFO
      - AUTH_SERVICE_URL=http://auth-service:8009
      - ORDER_SERVICE_URL=http://order-service:8002
    depends_on:
      - pickup-db
      - redis
    networks:
      - quenty-network
    restart: unless-stopped

  pickup-db:
    image: postgres:15-alpine
    container_name: quenty-pickup-db
    environment:
      - POSTGRES_USER=pickup
      - POSTGRES_PASSWORD=pickup_pass
      - POSTGRES_DB=pickup_db
    volumes:
      - pickup-db-data:/var/lib/postgresql/data
    networks:
      - quenty-network
    restart: unless-stopped

  # International Shipping Service
  international-shipping-service:
    build:
      context: ./microservices/international-shipping
      dockerfile: Dockerfile
    container_name: quenty-intl-shipping-service
    environment:
      - SERVICE_NAME=international-shipping-service
      - DATABASE_URL=postgresql+asyncpg://intlship:intlship_pass@intl-shipping-db:5432/intl_shipping_db
      - REDIS_URL=redis://redis:6379/4
      - LOG_LEVEL=INFO
      - AUTH_SERVICE_URL=http://auth-service:8009
      - CUSTOMER_SERVICE_URL=http://customer-service:8001
    depends_on:
      - intl-shipping-db
      - redis
    networks:
      - quenty-network
    restart: unless-stopped

  intl-shipping-db:
    image: postgres:15-alpine
    container_name: quenty-intl-shipping-db
    environment:
      - POSTGRES_USER=intlship
      - POSTGRES_PASSWORD=intlship_pass
      - POSTGRES_DB=intl_shipping_db
    volumes:
      - intl-shipping-db-data:/var/lib/postgresql/data
    networks:
      - quenty-network
    restart: unless-stopped

  # Microcredit Service
  microcredit-service:
    build:
      context: ./microservices/microcredit
      dockerfile: Dockerfile
    container_name: quenty-microcredit-service
    environment:
      - SERVICE_NAME=microcredit-service
      - DATABASE_URL=postgresql+asyncpg://credit:credit_pass@microcredit-db:5432/microcredit_db
      - REDIS_URL=redis://redis:6379/5
      - LOG_LEVEL=INFO
      - AUTH_SERVICE_URL=http://auth-service:8009
      - CUSTOMER_SERVICE_URL=http://customer-service:8001
    depends_on:
      - microcredit-db
      - redis
    networks:
      - quenty-network
    restart: unless-stopped

  microcredit-db:
    image: postgres:15-alpine
    container_name: quenty-microcredit-db
    environment:
      - POSTGRES_USER=credit
      - POSTGRES_PASSWORD=credit_pass
      - POSTGRES_DB=microcredit_db
    volumes:
      - microcredit-db-data:/var/lib/postgresql/data
    networks:
      - quenty-network
    restart: unless-stopped

  # Analytics Service
  analytics-service:
    build:
      context: ./microservices/analytics
      dockerfile: Dockerfile
    container_name: quenty-analytics-service
    environment:
      - SERVICE_NAME=analytics-service
      - DATABASE_URL=postgresql+asyncpg://analytics:analytics_pass@analytics-db:5432/analytics_db
      - REDIS_URL=redis://redis:6379/6
      - LOG_LEVEL=INFO
      - AUTH_SERVICE_URL=http://auth-service:8009
      - READ_REPLICA_URLS=postgresql+asyncpg://analytics:analytics_pass@customer-db:5432/customer_db,postgresql+asyncpg://analytics:analytics_pass@order-db:5432/order_db
    depends_on:
      - analytics-db
      - redis
    networks:
      - quenty-network
    restart: unless-stopped

  analytics-db:
    image: postgres:15-alpine
    container_name: quenty-analytics-db
    environment:
      - POSTGRES_USER=analytics
      - POSTGRES_PASSWORD=analytics_pass
      - POSTGRES_DB=analytics_db
    volumes:
      - analytics-db-data:/var/lib/postgresql/data
    networks:
      - quenty-network
    restart: unless-stopped

  # Reverse Logistics Service
  reverse-logistics-service:
    build:
      context: ./microservices/reverse-logistics
      dockerfile: Dockerfile
    container_name: quenty-reverse-logistics-service
    environment:
      - SERVICE_NAME=reverse-logistics-service
      - DATABASE_URL=postgresql+asyncpg://reverse:reverse_pass@reverse-logistics-db:5432/reverse_logistics_db
      - REDIS_URL=redis://redis:6379/7
      - LOG_LEVEL=INFO
      - AUTH_SERVICE_URL=http://auth-service:8009
      - ORDER_SERVICE_URL=http://order-service:8002
      - CUSTOMER_SERVICE_URL=http://customer-service:8001
    depends_on:
      - reverse-logistics-db
      - redis
    networks:
      - quenty-network
    restart: unless-stopped

  reverse-logistics-db:
    image: postgres:15-alpine
    container_name: quenty-reverse-logistics-db
    environment:
      - POSTGRES_USER=reverse
      - POSTGRES_PASSWORD=reverse_pass
      - POSTGRES_DB=reverse_logistics_db
    volumes:
      - reverse-logistics-db-data:/var/lib/postgresql/data
    networks:
      - quenty-network
    restart: unless-stopped

  # Franchise Service
  franchise-service:
    build:
      context: ./microservices/franchise
      dockerfile: Dockerfile
    container_name: quenty-franchise-service
    environment:
      - SERVICE_NAME=franchise-service
      - DATABASE_URL=postgresql+asyncpg://franchise:franchise_pass@franchise-db:5432/franchise_db
      - REDIS_URL=redis://redis:6379/8
      - LOG_LEVEL=INFO
      - AUTH_SERVICE_URL=http://auth-service:8009
    depends_on:
      - franchise-db
      - redis
    networks:
      - quenty-network
    restart: unless-stopped

  franchise-db:
    image: postgres:15-alpine
    container_name: quenty-franchise-db
    environment:
      - POSTGRES_USER=franchise
      - POSTGRES_PASSWORD=franchise_pass
      - POSTGRES_DB=franchise_db
    volumes:
      - franchise-db-data:/var/lib/postgresql/data
    networks:
      - quenty-network
    restart: unless-stopped

  # Shared Services
  redis:
    image: redis:7-alpine
    container_name: quenty-redis
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    networks:
      - quenty-network
    restart: unless-stopped

  # Message Queue for Async Communication
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: quenty-rabbitmq
    ports:
      - "15672:15672"  # Management UI
    environment:
      - RABBITMQ_DEFAULT_USER=quenty
      - RABBITMQ_DEFAULT_PASS=quenty_pass
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - quenty-network
    restart: unless-stopped

  # Service Discovery (Consul)
  consul:
    image: consul:1.15
    container_name: quenty-consul
    ports:
      - "8500:8500"  # UI
    command: agent -server -bootstrap-expect=1 -ui -client=0.0.0.0
    volumes:
      - consul-data:/consul/data
    networks:
      - quenty-network
    restart: unless-stopped

  # Monitoring Services
  prometheus:
    image: prom/prometheus:latest
    container_name: quenty-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - quenty-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: quenty-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - quenty-network
    restart: unless-stopped

  # Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: quenty-jaeger
    ports:
      - "16686:16686"  # UI
      - "14268:14268"  # HTTP collector
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    networks:
      - quenty-network
    restart: unless-stopped

  # Load Balancer / Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: quenty-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api-gateway
    networks:
      - quenty-network
    restart: unless-stopped

volumes:
  # Database volumes
  auth-db-data:
  customer-db-data:
  order-db-data:
  pickup-db-data:
  intl-shipping-db-data:
  microcredit-db-data:
  analytics-db-data:
  reverse-logistics-db-data:
  franchise-db-data:
  
  # Service volumes
  redis-data:
  rabbitmq-data:
  consul-data:
  prometheus-data:
  grafana-data:

networks:
  quenty-network:
    driver: bridge